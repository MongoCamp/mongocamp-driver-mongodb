package dev.mongocamp.driver.mongodb.jdbc

import org.mongodb.scala.MongoClient

import java.{sql, util}
import java.sql.{Blob, CallableStatement, Clob, Connection, DatabaseMetaData, NClob, PreparedStatement, SQLWarning, SQLXML, Savepoint, Statement, Struct}
import java.util.Properties
import java.util.concurrent.Executor

class MongoJdbcConnection(client: MongoClient) extends Connection {
  private var _isClosed = false
  private var _isReadOnly = false

  override def createStatement(): Statement = new MongoPreparedStatement(this, null)

  override def prepareStatement(sql: String): PreparedStatement = {
    new MongoPreparedStatement(this, sql)
  }

  override def prepareCall(sql: String): CallableStatement = {
    checkClosed()
    null
  }

  override def nativeSQL(sql: String): String = ???

  override def setAutoCommit(autoCommit: Boolean): Unit = {
    checkClosed()
  }

  override def getAutoCommit: Boolean = {
    checkClosed()
    true
  }


  override def commit(): Unit = {
    checkClosed()
  }


  override def rollback(): Unit = {
    checkClosed()
  }


  override def close(): Unit = {
    _isClosed = true
    client.close()
  }

  override def isClosed: Boolean = _isClosed

  override def getMetaData: DatabaseMetaData = ???

  override def setReadOnly(readOnly: Boolean): Unit = {
    checkClosed()
    _isReadOnly = readOnly
  }

  override def isReadOnly: Boolean = _isReadOnly

  override def setCatalog(catalog: String): Unit = {
    checkClosed()
  }

  override def getCatalog: String = null

  override def setTransactionIsolation(level: Int): Unit = {
    checkClosed()
    // Since the only valid value for MongoDB is Connection.TRANSACTION_NONE, and the javadoc for this method
    // indicates that this is not a valid value for level here, throw unsupported operation exception.
    throw new UnsupportedOperationException("MongoDB provides no support for transactions.")
  }


  override def getTransactionIsolation: Int = {
    checkClosed()
    Connection.TRANSACTION_NONE
  }

  override def getWarnings: SQLWarning = {
    checkClosed()
    null
  }

  override def clearWarnings(): Unit =  checkClosed()

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = ???

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = ???

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = ???

  override def getTypeMap: util.Map[String, Class[_]] = ???

  override def setTypeMap(map: util.Map[String, Class[_]]): Unit = ???

  override def setHoldability(holdability: Int): Unit = ???

  override def getHoldability: Int = ???

  override def setSavepoint(): Savepoint = ???

  override def setSavepoint(name: String): Savepoint = ???

  override def rollback(savepoint: Savepoint): Unit = ???

  override def releaseSavepoint(savepoint: Savepoint): Unit = ???

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = ???

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = ???

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = ???

  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = ???

  override def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = ???

  override def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = ???

  override def createClob(): Clob = ???

  override def createBlob(): Blob = ???

  override def createNClob(): NClob = ???

  override def createSQLXML(): SQLXML = ???

  override def isValid(timeout: Int): Boolean = ???

  override def setClientInfo(name: String, value: String): Unit = ???

  override def setClientInfo(properties: Properties): Unit = ???

  override def getClientInfo(name: String): String = ???

  override def getClientInfo: Properties = ???

  override def createArrayOf(typeName: String, elements: Array[AnyRef]): sql.Array = ???

  override def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = ???

  override def setSchema(schema: String): Unit = ???

  override def getSchema: String = ???

  override def abort(executor: Executor): Unit = ???

  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = ???

  override def getNetworkTimeout: Int = ???

  @throws[SQLAlreadyClosedException]
  override def unwrap[T](iface: Class[T]): T = {
    checkClosed()
    null.asInstanceOf[T]
  }

  @throws[SQLAlreadyClosedException]
  override def isWrapperFor(iface: Class[_]): Boolean = {
    checkClosed()
    false
  }


  @throws[SQLAlreadyClosedException]
  private def checkClosed(): Unit = {
    if (isClosed) {
      throw new SQLAlreadyClosedException(this.getClass.getSimpleName)
    }
  }
}
