import{_ as s,c as a,a2 as t,o as i}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"SQL Converter to Mongo Query","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/sql/queryholder.md","filePath":"documentation/sql/queryholder.md","lastUpdated":1730840042000}'),n={name:"documentation/sql/queryholder.md"};function o(l,e,r,h,p,d){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="sql-converter-to-mongo-query" tabindex="-1">SQL Converter to Mongo Query <a class="header-anchor" href="#sql-converter-to-mongo-query" aria-label="Permalink to &quot;SQL Converter to Mongo Query&quot;">​</a></h1><p>The MongoSqlQueryHolder provides a way to convert a SQL query to a Mongo query and execute it on a Mongo database.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Initialize the query holder with the SQL query you want to analyse or execute.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> queryConverter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MongoSqlQueryHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;select count(*) as anz from people where age &lt; 30 and (age &lt; 30 or age &gt; 30) order by id asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>In most cases you simply want to run the query and get the result as a <code>Seq[Document]</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The method run returns a classical MongoDb Observable use the implicits to convert it to a <code>Seq[Document]</code>.</p></div><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> selectResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queryConverter.run(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.provider).resultList()</span></span></code></pre></div><p>You can also get the information about the collection and the keys that are used in the query.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queryConverter.getCollection mustEqual </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;people&quot;</span></span></code></pre></div><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queryConverter.getKeysForEmptyDocument mustEqual </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>In some cases you need the information about the function calls in the query, for example in your own <a href="./jdbc-driver.html">jdbc driver</a> implementation. Because the difference of MongoDb and SQL for example a sql <code>select count(*) from empty-collection</code> is a list documents with one element and the MongoDb has no document in it.</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queryConverter.hasFunctionCallInSelect mustEqual </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>',13)]))}const k=s(n,[["render",o]]);export{u as __pageData,k as default};
